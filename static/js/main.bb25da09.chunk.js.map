{"version":3,"sources":["components/Start.js","components/helpers.js","components/Question.js","components/Score.js","components/LoadingScreen.js","components/Error.js","components/MainView.js","components/Tab.js","components/Trivial.js","App.js","serviceWorker.js","index.js"],"names":["Start","react_default","a","createElement","className","this","props","category","Button","data-btn-play","React","Component","decodeHtml","html","txt","document","innerHTML","value","Question","state","_currentQuestionIndex","currentQuestionIndex","question","questions","Grid","Row","block","data-btn-index","data-selected","shuffledQuestions","Col","xs","data-btn-confirm","Score","msg","score","data-btn-reset","LoadingScreen","Error","MainView","undefined","isLoading","components_LoadingScreen","screen","components_Start","components_Question","components_Score","components_Error","Tab","Trivial","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","roundsNumber","currentAnswered","handleClick","bind","assertThisInitialized","shuffleQuestions","getResources","addEventListener","removeEventListener","_asyncMethod","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","fetch","then","response","json","responseJson","setState","results","catch","error","console","stop","apply","arguments","asyncMethod","event","target","dataset","btnPlay","btnIndex","querySelector","textContent","buttons","querySelectorAll","Array","from","forEach","btn","classList","remove","selected","add","btnConfirm","selectedBtn","find","correctAnswer","correct_answer","correctBtn","choosenAnswer","btnReset","array","t","i","m","length","Math","floor","random","shuffleArray","toConsumableArray","incorrect_answers","concat","map","elem","components_Tab","components_MainView","App","components_Trivial","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iWAeeA,mLAVP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,6CAAqCE,KAAKC,MAAMC,SAAhD,yCACAN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAU,UAAUK,iBAAA,GAA5B,gBANIC,IAAMC,sCCD1B,SAASC,EAAWC,GAChB,IAAIC,EAAMC,SAASZ,cAAc,YAEjC,OADAW,EAAIE,UAAYH,EACTC,EAAIG,UCuCAC,mLAtCP,IAAIC,EAAQd,KAAKC,MAAMA,MACnBc,EAAwBD,EAAME,qBAI9BC,EAAWV,EAFIO,EAAMI,UAAUH,GAAuBE,UAI1D,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,uBAAeiB,EAAsB,GACrCnB,EAAAC,EAAAC,cAAA,SAAImB,GACJrB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACIvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAU,YAAYsB,OAAK,EAACC,iBAAe,IAAIC,gBAAc,KAAKT,EAAMU,kBAAkB,KAEtG5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAU,YAAYsB,OAAK,EAACC,iBAAe,IAAIC,gBAAc,KAAKT,EAAMU,kBAAkB,KAEtG5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAU,YAAYsB,OAAK,EAACC,iBAAe,IAAIC,gBAAc,KAAKT,EAAMU,kBAAkB,KAEtG5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAU,YAAYsB,OAAK,EAACC,iBAAe,IAAIC,gBAAc,KAAKT,EAAMU,kBAAkB,KAEtG5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKC,GAAI,IACT9B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKC,GAAI,IACL9B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAU,qCAAqCsB,OAAK,EAACM,mBAAiB,KAA9E,YAEJ/B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKC,GAAI,cAhCVrB,IAAMC,WC4CdsB,mLA1CP,IAAId,EAAQd,KAAKC,MAAMA,MAEnB4B,EAAM,GACV,OAAOf,EAAMgB,OACT,KAAK,EACDD,EAAG,uBACH,MACJ,KAAK,EACL,KAAK,EACL,KAAK,EACDA,EAAG,oCACH,MACJ,KAAK,EACL,KAAK,EACDA,EAAG,iBACH,MACJ,KAAK,EACL,KAAK,EACL,KAAK,EACDA,EAAG,6BACH,MACJ,KAAK,EACDA,EAAG,oCACH,MACJ,KAAK,GACDA,EAAG,0DACH,MACJ,QACIA,EAAM,6CAGd,OACIjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAee,EAAMgB,MAAlC,OACAlC,EAAAC,EAAAC,cAAA,SAAI+B,GACJjC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQJ,UAAU,UAAUgC,kBAAA,GAA5B,sBAvCI1B,IAAMC,WCSX0B,mLARP,OACIpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,qCAJYO,IAAMC,WCWnB2B,mLATP,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,gEAAuDF,EAAAC,EAAAC,cAAA,WAAvD,6DAJIO,IAAMC,WCyDX4B,mLAlDP,IAAIpB,EAAQd,KAAKC,MAAMA,MACnBC,EAAW,GAMf,YAJ2BiC,IAAvBrB,EAAMI,UAAU,KAChBhB,EAAWY,EAAMI,UAAU,GAAGhB,UAG9BY,EAAMsB,UAEFxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAACuC,EAAD,OAKS,UAAjBvB,EAAMwB,OAEF1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAACyC,EAAD,CAAOrC,SAAUA,KAKR,mBAAjBY,EAAMwB,OAEF1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAC0C,EAAD,CAAUvC,MAAOa,KAKR,UAAjBA,EAAMwB,OAEF1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAC2C,EAAD,CAAOxC,MAAOa,KAKL,UAAjBA,EAAMwB,OAEF1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAC4C,EAAD,YAHZ,SAzCerC,IAAMC,WCiBdqC,mLAnBP,OACI/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACIvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKC,GAAI,EAAG3B,UAAU,aAClBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,iBAEJH,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKC,GAAI,EAAG3B,UAAU,cAClBH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ4B,kBAAA,GAAR,uBAXd1B,IAAMC,WCgNTsC,cA3MX,SAAAA,EAAY3C,GAAO,IAAA4C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA9C,KAAA4C,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAA9C,KAAA8C,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlD,KAAMC,KACDa,MPYF,CACHqC,aAAc,GACdf,WAAW,EACXE,OAAQ,QACRpB,UAAW,GACXF,qBAAsB,EACtBoC,iBAAiB,EACjBtB,MAAO,EACPN,kBAAmB,IOnBnBqB,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACnBA,EAAKW,iBAAmBX,EAAKW,iBAAiBF,KAAtBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACxBA,EAAKY,aAAeZ,EAAKY,aAAaH,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALLA,mFAWf7C,KAAKyD,eAEL/C,SAASgD,iBAAiB,QAAS1D,KAAKqD,4DAKxC3C,SAASiD,oBAAoB,QAAS3D,KAAKqD,oDAO3C,IAAIR,EAAQ7C,KADD,SAAA4D,IAAA,OAAAA,EAAAd,OAAAe,EAAA,EAAAf,CAAAgB,EAAAjE,EAAAkE,KAKX,SAAAC,IAAA,OAAAF,EAAAjE,EAAAoE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aACc,oFADdF,EAAAG,OAAA,SAGWC,MAFG,qFAGLC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAEH7B,EAAM8B,SAAS,CACXvC,WAAW,EACXlB,UAAWwD,EAAaE,YAI/BC,MAAM,SAACC,GAEJjC,EAAM8B,SAAS,CACXrC,OAAQ,QACRF,WAAW,IAGf2C,QAAQD,MAAMA,MApB1B,wBAAAZ,EAAAc,SAAAhB,EAAAhE,UALWiF,MAAAjF,KAAAkF,YAAA,WAAAtB,EAAAqB,MAAAjF,KAAAkF,WAGXC,uCA+BQC,GAWR,SARqCjD,IAAjCiD,EAAMC,OAAOC,QAAQC,UACrBvF,KAAKwD,mBACLxD,KAAK2E,SAAS,CACVrC,OAAQ,yBAKsBH,IAAlCiD,EAAMC,OAAOC,QAAQE,WAIU,YAFd9E,SAAS+E,cAAc,sBAEzBC,YAA2B,CAEtC,IAAIC,EAAUjF,SAASkF,iBAAT,oBAEdC,MAAMC,KAAKH,GAASI,QAAQ,SAACC,GACzBA,EAAIC,UAAUC,OAAO,YACrBF,EAAIV,QAAQa,SAAW,MAE3Bf,EAAMC,OAAOY,UAAUG,IAAI,YAC3BhB,EAAMC,OAAOC,QAAQa,SAAW,IAMxC,QAAwChE,IAApCiD,EAAMC,OAAOC,QAAQe,WAA0B,CAE/C,IAAIrF,EAAuBhB,KAAKc,MAAME,qBAElC2E,EAAUjF,SAASkF,iBAAT,oBAEVU,EAAcT,MAAMC,KAAKH,GAASY,KAAK,SAACP,GACxC,MAAgC,MAAzBA,EAAIV,QAAQa,WAIvB,GAAiC,YAA7Bf,EAAMC,OAAOK,aAGb,QAAoBvD,IAAhBmE,EAA2B,CAG3B,IAAIE,EAAgBjG,EAAWP,KAAKc,MAAMI,UAAUF,GAAsByF,gBAEtEC,EAAab,MAAMC,KAAKH,GAASY,KAAK,SAACP,GACvC,OAAOA,EAAIN,cAAgBc,IAG3BG,EAAgBL,EAAYZ,YAGhCG,MAAMC,KAAKH,GAASI,QAAQ,SAACC,GACzBA,EAAIC,UAAUC,OAAO,YACrBF,EAAIV,QAAQa,SAAW,MAIvBQ,IAAkBH,GAElBF,EAAYL,UAAUG,IAAI,eAC1BpG,KAAK2E,SAAS,CAAE7C,OAAQ9B,KAAKc,MAAMgB,MAAQ,MAI3CwE,EAAYL,UAAUG,IAAI,cAC1BM,EAAWT,UAAUG,IAAI,gBAEzBpF,IAAyBhB,KAAKc,MAAMqC,aAAe,EACnDiC,EAAMC,OAAOK,YAAc,iBAE3BN,EAAMC,OAAOK,YAAc,sBAM/B1E,EAAuBhB,KAAKc,MAAMqC,aAAe,GAGjD0C,MAAMC,KAAKH,GAASI,QAAQ,SAACC,GACzBA,EAAIC,UAAUC,OAAO,cACrBF,EAAIC,UAAUC,OAAO,eACrBF,EAAIV,QAAQa,SAAW,MAI3BnG,KAAK2E,SAAS,CACV3D,qBAAsBhB,KAAKc,MAAME,qBAAuB,EACxDQ,kBAAmB,KAGvB4D,EAAMC,OAAOK,YAAc,UAE3B1F,KAAKwD,oBAILxD,KAAK2E,SAAS,CACVrC,OAAQ,eAQcH,IAAlCiD,EAAMC,OAAOC,QAAQsB,WAGrB5G,KAAK2E,SP9JN,CACHxB,aAAc,GACdf,WAAW,EACXE,OAAQ,QACRpB,UAAW,GACXF,qBAAsB,EACtBoC,iBAAiB,EACjBtB,MAAO,EACPN,kBAAmB,KOwJfxB,KAAKyD,2DAOT,IAEIjC,EPvLZ,SAAsBqF,GAGlB,IAFA,IAAsBC,EAAGC,EAArBC,EAAIH,EAAMI,OAEPD,GACHD,EAAIG,KAAKC,MAAMD,KAAKE,SAAWJ,KAE/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAEf,OAAOD,EO2KqBQ,CAAavE,OAAAwE,EAAA,EAAAxE,CAAI9C,KAAKc,MAAMI,UAAUlB,KAAKc,MAAME,sBAAsBuG,mBAA3DC,OAAA,CAA8ExH,KAAKc,MAAMI,UAAUlB,KAAKc,MAAME,sBAAsByF,kBAE9HgB,IAAI,SAACC,GAAW,OAAOnH,EAAWmH,KAE5E1H,KAAK2E,SAAS,CACVnD,kBAAmBA,qCAMvB,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAC6H,EAAD,MACA/H,EAAAC,EAAAC,cAAC8H,EAAD,CAAU3H,MAAOD,KAAKc,iBArMpBT,IAAMC,WCObuH,mLARX,OACEjI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgI,EAAD,cAJUxH,aCQEyH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzI,EAAAC,EAAAC,cAACwI,EAAD,MAAS5H,SAAS6H,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.bb25da09.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass Start extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='start'>\r\n                <h1>Trivial Game</h1>\r\n                <p>Answer 10 random questions about {this.props.category} and try to score as high as you can!</p>\r\n                <Button className='btn-cta' data-btn-play>Play</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Start;","// Helper functions\r\n\r\nfunction decodeHtml(html) {\r\n    var txt = document.createElement(\"textarea\");\r\n    txt.innerHTML = html;\r\n    return txt.value;\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n    var m = array.length, t, i;\r\n\r\n    while (m) {\r\n        i = Math.floor(Math.random() * m--);\r\n\r\n        t = array[m];\r\n        array[m] = array[i];\r\n        array[i] = t;\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction initialState() {\r\n    return {\r\n        roundsNumber: 10,\r\n        isLoading: true,\r\n        screen: 'start', // 'start', 'questionScreen', 'score', 'error'\r\n        questions: {},\r\n        currentQuestionIndex: 0,\r\n        currentAnswered: false,\r\n        score: 0,\r\n        shuffledQuestions: [],\r\n    };\r\n}\r\n\r\nexport { decodeHtml, shuffleArray, initialState };","import React from 'react';\r\nimport { Button, Row, Grid, Col } from 'react-bootstrap';\r\nimport { decodeHtml }  from './helpers';\r\n\r\nclass Question extends React.Component {\r\n    render() {\r\n        let state = this.props.props;\r\n        let _currentQuestionIndex = state.currentQuestionIndex;\r\n\r\n        let HTMLquestion = state.questions[_currentQuestionIndex].question;\r\n\r\n        let question = decodeHtml(HTMLquestion);\r\n\r\n        return (\r\n            <div className='question'>\r\n                <h2>Question #{_currentQuestionIndex+1}</h2>\r\n                <p>{question}</p>\r\n                <Grid>\r\n                    <Row>\r\n                        <Button className='mb-1 wrap' block data-btn-index='0' data-selected='0'>{state.shuffledQuestions[0]}</Button>\r\n                    </Row>\r\n                    <Row>\r\n                        <Button className='mb-1 wrap' block data-btn-index='1' data-selected='0'>{state.shuffledQuestions[1]}</Button>\r\n                    </Row>\r\n                    <Row>\r\n                        <Button className='mb-1 wrap' block data-btn-index='2' data-selected='0'>{state.shuffledQuestions[2]}</Button>\r\n                    </Row>\r\n                    <Row>\r\n                        <Button className='mb-1 wrap' block data-btn-index='3' data-selected='0'>{state.shuffledQuestions[3]}</Button>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col xs={1}></Col>\r\n                        <Col xs={10}>\r\n                            <Button className='btn mx-1 mb-1 center-block btn-cta' block data-btn-confirm='1'>Confirm</Button>\r\n                        </Col>\r\n                        <Col xs={1}></Col>\r\n                    </Row>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass Score extends React.Component {\r\n    render() {\r\n\r\n        let state = this.props.props;\r\n\r\n        let msg = '';\r\n        switch(state.score) {\r\n            case 0:\r\n                msg = `Did you even try...?`;\r\n                break;\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n                msg = `My 5 year old knows more than you`;\r\n                break;\r\n            case 4:\r\n            case 5:\r\n                msg = `Not too bad...`;\r\n                break;\r\n            case 6:\r\n            case 7:\r\n            case 8:\r\n                msg = `Wow, you know quite a lot!`;\r\n                break;\r\n            case 9:\r\n                msg = `I can't believe how wise you are!`;\r\n                break;\r\n            case 10:\r\n                msg = `You're a legend, your knowledge is beyond this world...`;\r\n                break;\r\n            default:\r\n                msg = 'something went wrong with your score... :(';\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p className='score'>Your score:</p>\r\n                <p className='score-value'>{state.score}/10</p>\r\n                <p>{msg}</p>\r\n                <Button className='btn-cta' data-btn-reset>Play again</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\n\r\nclass LoadingScreen extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='start'>\r\n                <h1>Loading game...</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadingScreen;","import React from 'react';\r\n\r\nclass Error extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='start'>\r\n                <p>There was some issue trying to get the questions :( <br/>\r\n                Check your internet connection or try again later</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\nimport Start from './Start';\r\nimport Question from './Question';\r\nimport Score from './Score';\r\nimport LoadingScreen from './LoadingScreen';\r\nimport Error from './Error';\r\n\r\nclass MainView extends React.Component {\r\n    render() {\r\n        let state = this.props.props;\r\n        let category = '';\r\n\r\n        if (state.questions[0] !== undefined) {\r\n            category = state.questions[0].category;\r\n        }\r\n\r\n        if (state.isLoading) {\r\n            return (\r\n                <div className='mainView-wrapper'>\r\n                    <LoadingScreen />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (state.screen === 'start') {\r\n            return (\r\n                <div className='mainView-wrapper'>\r\n                    <Start category={category} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (state.screen === 'questionScreen') {\r\n            return (\r\n                <div className='mainView-wrapper'>\r\n                    <Question props={state}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (state.screen === 'score') {\r\n            return (\r\n                <div className='mainView-wrapper'>\r\n                    <Score props={state}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (state.screen === 'error') {\r\n            return (\r\n                <div className='mainView-wrapper'>\r\n                    <Error />\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default MainView;","import React from 'react';\r\nimport { Grid, Row, Button, Col } from 'react-bootstrap';\r\n\r\nclass Tab extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='tab-wrapper'>\r\n                <div className='tab-container'>\r\n                    <Grid>\r\n                        <Row>\r\n                            <Col xs={6} className='text-left'>\r\n                                <span className='title'>Trivial Game</span>\r\n                            </Col>\r\n                            <Col xs={6} className='text-right'>\r\n                                <Button data-btn-reset>Restart</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tab;","import React from 'react';\r\nimport './style.css'\r\nimport MainView from './MainView';\r\nimport Tab from './Tab';\r\nimport { decodeHtml, shuffleArray, initialState } from './helpers';\r\n\r\n// REACT\r\nclass Trivial extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = initialState();\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.shuffleQuestions = this.shuffleQuestions.bind(this);\r\n        this.getResources = this.getResources.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // initial data fetch\r\n        this.getResources();\r\n\r\n        document.addEventListener('click', this.handleClick);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('click', this.handleClick);\r\n    }\r\n\r\n    /*\r\n    * Fetching of external data is done in initial mount and when reset button is clicked\r\n    */\r\n    getResources() {\r\n        let _this = this;\r\n\r\n        asyncMethod();\r\n\r\n        async function asyncMethod() {\r\n            let url = 'https://opentdb.com/api.php?amount=10&category=23&difficulty=medium&type=multiple';\r\n\r\n            return fetch(url)\r\n                .then((response) => response.json())\r\n                .then((responseJson) => {\r\n\r\n                    _this.setState({\r\n                        isLoading: false,\r\n                        questions: responseJson.results,\r\n                    });\r\n\r\n                })\r\n                .catch((error) => {\r\n\r\n                    _this.setState({\r\n                        screen: 'error',\r\n                        isLoading: false,\r\n                    });\r\n\r\n                    console.error(error);\r\n\r\n                });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // events on all buttons are delegated on this method\r\n    handleClick(event) {\r\n\r\n        // handles starting the game\r\n        if (event.target.dataset.btnPlay !== undefined) {\r\n            this.shuffleQuestions();\r\n            this.setState({\r\n                screen: 'questionScreen',\r\n            });\r\n        }\r\n\r\n        // handles selecting an answer\r\n        if (event.target.dataset.btnIndex !== undefined) {\r\n\r\n            let confirmBtn = document.querySelector('[data-btn-confirm]');\r\n\r\n            if (confirmBtn.textContent === 'Confirm') {\r\n\r\n                let buttons = document.querySelectorAll(`[data-btn-index]`);\r\n\r\n                Array.from(buttons).forEach((btn) => {\r\n                    btn.classList.remove('btn-info');\r\n                    btn.dataset.selected = '0';\r\n                });\r\n                event.target.classList.add('btn-info');\r\n                event.target.dataset.selected = '1';\r\n\r\n            }\r\n        }\r\n\r\n        // confirm / next button was clicked\r\n        if (event.target.dataset.btnConfirm !== undefined) {\r\n\r\n            let currentQuestionIndex = this.state.currentQuestionIndex;\r\n\r\n            let buttons = document.querySelectorAll(`[data-btn-index]`);\r\n\r\n            let selectedBtn = Array.from(buttons).find((btn) => {\r\n                return btn.dataset.selected === '1';\r\n            });\r\n\r\n            // button was in confirm\r\n            if (event.target.textContent === 'Confirm') {\r\n\r\n                // there was one selected answer\r\n                if (selectedBtn !== undefined) {\r\n\r\n                    // get the content of the selected answer\r\n                    let correctAnswer = decodeHtml(this.state.questions[currentQuestionIndex].correct_answer);\r\n\r\n                    let correctBtn = Array.from(buttons).find((btn) => {\r\n                        return btn.textContent === correctAnswer;\r\n                    });\r\n\r\n                    let choosenAnswer = selectedBtn.textContent;\r\n\r\n                    // clean buttons\r\n                    Array.from(buttons).forEach((btn) => {\r\n                        btn.classList.remove('btn-info');\r\n                        btn.dataset.selected = '0';\r\n                    });\r\n\r\n                    // compare it to the correct answer\r\n                    if (choosenAnswer === correctAnswer) {\r\n                        // answer given was correct\r\n                        selectedBtn.classList.add('btn-success');\r\n                        this.setState({ score: +this.state.score + 1 });\r\n\r\n                    } else {\r\n                        // answer given was wrong\r\n                        selectedBtn.classList.add('btn-danger');\r\n                        correctBtn.classList.add('btn-success');\r\n                    }\r\n                    if (currentQuestionIndex === this.state.roundsNumber - 1) {\r\n                        event.target.textContent = 'See your score';\r\n                    } else {\r\n                        event.target.textContent = 'Next question';\r\n                    }\r\n                }\r\n                // button was in next\r\n            } else {\r\n\r\n                if (currentQuestionIndex < this.state.roundsNumber - 1) {\r\n\r\n                    // clean buttons\r\n                    Array.from(buttons).forEach((btn) => {\r\n                        btn.classList.remove('btn-danger');\r\n                        btn.classList.remove('btn-success');\r\n                        btn.dataset.selected = '0';\r\n                    });\r\n\r\n                    // displays next question\r\n                    this.setState({\r\n                        currentQuestionIndex: this.state.currentQuestionIndex + 1,\r\n                        shuffledQuestions: [],\r\n                    });\r\n\r\n                    event.target.textContent = 'Confirm';\r\n\r\n                    this.shuffleQuestions();\r\n\r\n                } else {\r\n\r\n                    this.setState({\r\n                        screen: 'score',\r\n                    });\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (event.target.dataset.btnReset !== undefined) {\r\n            // fetch data again and reset everything\r\n            // I'd like that the initial state is held within a constant somewhere to be reused\r\n            this.setState( initialState() );\r\n\r\n            this.getResources();\r\n\r\n        }\r\n    }\r\n\r\n    shuffleQuestions() {\r\n\r\n        let shuffledHTMLArray = shuffleArray([...this.state.questions[this.state.currentQuestionIndex].incorrect_answers, this.state.questions[this.state.currentQuestionIndex].correct_answer]);\r\n\r\n        let shuffledQuestions = shuffledHTMLArray.map((elem) => { return decodeHtml(elem) });\r\n\r\n        this.setState({\r\n            shuffledQuestions: shuffledQuestions,\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='trivialWrapper'>\r\n                <div className='trivialContainer'>\r\n                    <Tab />\r\n                    <MainView props={this.state} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Trivial;","import React, { Component } from 'react';\nimport './App.css';\nimport Trivial from './components/Trivial';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Trivial />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}